options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
   JJTREE_OUTPUT_DIRECTORY = "Generated";
   OUTPUT_DIRECTORY = "Generated";
}

PARSER_BEGIN(Compiler)

public class Compiler {

  public static void main(String args[]) throws Exception {
    //Compiler parser = new Compiler(new java.io.FileReader(args[0]));
    Compiler parser = new Compiler(System.in);
    ASTProgram expr=parser.program();
    TreeWalk v=new TreeWalk();
    expr.jjtAccept(v,null);
  }
}

PARSER_END(Compiler)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}

TOKEN:
{
		<K_PROGRAM: 		"program" >
	|	<K_FUNCTION: 		"function">
	|	<K_PRINT_INTEGER: 	"print_integer">
	|	<K_PRINT_STRING:	"print_string">
	|	<K_PRINT_DOUBLE:	"print_double">
	|	<K_INTEGER: 		"integer">
	|	<K_ASSIGN: 			":=">
	|	<K_LCURLY: 			"{">
	|	<K_RCURLY: 			"}">
	| 	<K_LPAREN: 			"(">
	| 	<K_RPAREN: 			")">
	| 	<K_SEMI: 			";">
}

TOKEN : {
	   <IDENTIFIER: (["_","a"-"z","A"-"Z","$"]) (["_","a"-"z","A"-"Z","0"-"9","$"])*>
	|  <ICONSTANT: 	(["0"-"9"])+>
	|  <SCONSTANT: 	"\"" (~["\"","\n"])* "\"">
	|  <DCONSTANT: 	(["0"-"9"])* ["."] (["0"-"9"])* | (["0"-"9"])+ (["."] (["0"-"9"])+)? (["e","E"] (["+","-"])? (["0"-"9"])*)?>
}

ASTProgram program() #Program:
{ /*Variable Declrations*/ }
{
  <K_PROGRAM> <IDENTIFIER> <K_LCURLY> (function())+ <K_RCURLY>
  { System.out.println("Match program");
	return jjtThis; 
	}
}

void function() #Function:
{ Token t; }
{
	<K_FUNCTION> t=<K_INTEGER> <IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> (statement())+ <K_RCURLY> 
	{
		jjtThis.data.put("type",t.image);
		System.out.println("Matched Function");
	}
	
}

void statement() #Statement :
{ /*Variable Declrations*/ }
{
	varDeclare() {
		jjtThis.data.put("type","Variable Declaration");
	}

	| varAssign() {
		jjtThis.data.put("type","Variable Assignment");
	}

	| print_statement() {
		jjtThis.data.put("type","Print_Statement");
	}

}

void varDeclare() #VariableDeclare :
{ Token t; }
{
	<K_INTEGER> t=<IDENTIFIER> <K_SEMI> {
		jjtThis.data.put("type","INTEGER");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
}

void varAssign() #VariableAssignment :
{ Token val; Token var;}
{
	var=<IDENTIFIER> <K_ASSIGN> val=<ICONSTANT> <K_SEMI> {
		jjtThis.data.put("type","INTEGER");
		jjtThis.data.put("value",val.image);
		jjtThis.data.put("variable",var.image);
		jjtThis.data.put("lineNo",val.beginLine);
		
	}
}

void print_statement() #PrintStatement :
{ Token t; }
{
	<K_PRINT_INTEGER> <K_LPAREN> (t=<IDENTIFIER> | t=<ICONSTANT>) <K_RPAREN> <K_SEMI> {
		jjtThis.data.put("PType","INTEGER");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Printing an integer variable");
	}

	| <K_PRINT_DOUBLE> <K_LPAREN> (t=<IDENTIFIER> | t=<DCONSTANT>) <K_RPAREN> <K_SEMI> {
		jjtThis.data.put("PType","DOUBLE");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Printing a double variable");
	}

	| <K_PRINT_STRING> <K_LPAREN> (t=<IDENTIFIER> | t=<SCONSTANT>) <K_RPAREN> <K_SEMI> {
		jjtThis.data.put("PType","STRING");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Printing a string variable");
	}

}