options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
   JJTREE_OUTPUT_DIRECTORY = "Generated";
   OUTPUT_DIRECTORY = "Generated";
}

PARSER_BEGIN(Compiler)

public class Compiler {

  public static void main(String args[]) throws Exception {
    //Compiler parser = new Compiler(new java.io.FileReader(args[0]));
    Compiler parser = new Compiler(System.in);
    ASTprogram expr=parser.start();
    SymbolTable v=new SymbolTable();
    System.out.println(expr.jjtAccept(v,null));

  }
}

PARSER_END(Compiler)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}

TOKEN:
{
		<K_PROGRAM: 		"program" >
	|	<K_FUNCTION: 		"function">
	|	<K_PRINT_INTEGER: 	"print_integer">
	|	<K_INTEGER: 		"integer">
	|	<K_ASSIGN: 			":=">
	|	<K_LCURLY: 			"{">
	|	<K_RCURLY: 			"}">
	| 	<K_LPAREN: 			"(">
	| 	<K_RPAREN: 			")">
	| 	<K_SEMI: 			";">
	|	<ICONSTANT: 		[0-9]+>	
	|	<IDENTIFIER: 		[_a-zA-Z$][_a-zA-Z0-9$]*>
}

ASTprogram program() #program:
{ /*Variable Declrations*/ }
{
  <K_PROGRAM> <IDENTIFIER> <K_LCURLY> (function())+ <K_RCURLY>
  { return jjtThis; }
}

void function() #function:
{ /*Variable Declrations*/ }
{
	<K_FUNCTION> <K_INTEGER> <IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> (statement())+ <K_RCURLY>
	//identifier()"="expression()";"
}

void statement() :
{ /*Variable Declrations*/ }
{

}



void identifier() :
{/*Variable Declrations*/}
{
	<VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#Variable
}

void expression():
{}
{
	additiveExpression()
}

void additiveExpression() :
{}
{
	multiplicativeExpression()
	(<PLUS> multiplicativeExpression()#AddExpr(2)
	 | <MINUS> multiplicativeExpression()#SubractExpr(2)
	)*
}

void multiplicativeExpression() :
{}
{
	unaryExpression()
	(
	 <MULTIPLY> unaryExpression()#MultiplyExpr(2)
	 | <DIVIDE> unaryExpression()#DivideExpr(2)
	)*
}
void unaryExpression() :
{}
{
	<MINUS> numberExpression()#NegateExpr(1)|
	numberExpression()
}

void numberExpression() :
{
}
{
	<NUMBER>
	{ 
		jjtThis.data.put("value",new Integer(Integer.parseInt(token.image)));
	}#Number
	| <VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#VariableValue
}