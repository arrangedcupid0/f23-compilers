options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
   JJTREE_OUTPUT_DIRECTORY = "Generated";
   OUTPUT_DIRECTORY = "Generated";
}

PARSER_BEGIN(Compiler)

public class Compiler {

  public static void main(String args[]) throws Exception {
    //Compiler parser = new Compiler(new java.io.FileReader(args[0]));
    Compiler parser = new Compiler(System.in);
    ASTProgram expr=parser.program();
    TreeWalk v=new TreeWalk();
    expr.jjtAccept(v,null);
  }
}

PARSER_END(Compiler)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}

TOKEN:
{
		<K_DO: 				"do" >
	|	<K_DOUBLE: 			"double">
	|	<K_ELSE: 			"else">
	|	<K_EXIT:			"exit">
	|	<K_FUNCTION:		"function">
	|	<K_IF: 				"if">
	|	<K_INTEGER: 		"integer">
	|	<K_PRINT_DOUBLE: 	"print_double">
	|	<K_PRINT_INTEGER: 	"print_integer">
	|	<K_PRINT_STRING: 	"print_string">
	|	<K_PROCEDURE: 		"procedure">
	|	<K_PROGRAM: 		"program">
	|	<K_READ_DOUBLE: 	"read_double">
	|	<K_READ_INTEGER: 	"read_integer">
	|	<K_READ_STRING: 	"read_string">
	|	<K_RETURN: 			"return">
	|	<K_STRING: 			"string">
	|	<K_THEN: 			"then">
	|	<K_WHILE: 			"while">
	|	<K_ASSIGN: 			":=">
	|	<K_ASSIGN_PLUS: 		"+=">
	|	<K_ASSIGN_MINUS: 		"-=">
	|	<K_ASSIGN_MULTIPLY: 	"*=">
	|	<K_ASSIGN_DIVIDE: 	"/=">
	|	<K_ASSIGN_MOD: 		"%=">
	|	<K_COMMA: 			",">
	|	<K_COMMENT: 			"//">
	|	<K_DAND: 				"&&">
	|	<K_DIVIDE: 			"/">
	|	<K_DOR: 				"||">
	|	<K_DEQ: 				"==">
	|	<K_GEQ: 				">=">
	|	<K_GT: 				">">
	|	<K_LBRACKET: 			"[">
	|	<K_LEQ: 				"<=">
	|	<K_LCURLY: 			"{">
	|	<K_LPAREN: 			"(">
	|	<K_LT: 				"<">
	|	<K_MINUS: 			"-">
	|	<K_DECREMENT: 		"--">
	|	<K_MOD: 				"%">
	|	<K_MULTIPLY: 			"*">
	|	<K_NE: 				"!=">
	|	<K_NOT: 				"!">
	|	<K_PERIOD: 			".">
	|	<K_PLUS: 				"+">
	| 	<K_INCREMENT: 		"++">
	| 	<K_RBRACKET: 			"]">
	| 	<K_RCURLY: 			"}">
	| 	<K_RPAREN: 			")">
	| 	<K_SEMI: 				";">
}

TOKEN : {
	   <IDENTIFIER: (["_","a"-"z","A"-"Z","$"]) (["_","a"-"z","A"-"Z","0"-"9","$"])*>
	|  <ICONSTANT: 	(["0"-"9"])+>
	|  <SCONSTANT: 	"\"" (~["\"","\n"])* "\"">
	|  <DCONSTANT: 	(["0"-"9"])* ["."] (["0"-"9"])* | (["0"-"9"])+ (["."] (["0"-"9"])+)? (["d"] (["+","-"])? (["0"-"9"])*)?>
}

ASTProgram program() #Program:
{ /*Variable Declarations*/ }
{
  <K_PROGRAM> <IDENTIFIER> <K_LCURLY> programBody() <K_RCURLY>
  	{ 
		System.out.println("Match program");
		return jjtThis; 
	}
}

void programBody() #ProgramBody:
{/*Variable Declarations*/}
{
	(function() | procedure())*
	{
		
	}
}

void function() #Function:
{ Token t; Token t2; }
{
	<K_FUNCTION> t=type() t2=<IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> body() <K_RCURLY> 
	{
		jjtThis.data.put("Param","false");
		jjtThis.data.put("type",t.image);
		jjtThis.data.put("funcName",t2.image);
		System.out.println("Matched Function");
	}
	| <K_FUNCTION> t=type() t2=<IDENTIFIER> <K_LPAREN> parameterList() <K_RPAREN> <K_LCURLY> body() <K_RCURLY> 
	{
		jjtThis.data.put("Param","true");
		jjtThis.data.put("type",t.image);
		jjtThis.data.put("funcName",t2.image);
		System.out.println("Matched Function");
	}
	
}

void type() #Type:
{}
{
	(<K_INTEGER> | <K_DOUBLE> | <K_STRING>)
	{
		
	}
}

void procedure() #Procedure:
{/*Variable Declarations*/}
{
	LOOKAHEAD(4)
	<K_PROCEDURE> <IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> body() <K_RCURLY>
	{
		
	}
	| <K_PROCEDURE> <IDENTIFIER> <K_LPAREN> parameterList() <K_RPAREN> <K_LCURLY> body() <K_RCURLY>
	{
		
	}
}

void parameterList() #ParameterList:
{}
{
	parameter() (<K_COMMA> parameter())*
	{

	}
}

void parameter() #Parameter:
{ Token t; }
{
	<K_INTEGER> t=<IDENTIFIER> (<K_LBRACKET> <K_RBRACKET>)?{
		jjtThis.data.put("type","INTEGERARRAY");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| 
	<K_DOUBLE> t=<IDENTIFIER> (<K_LBRACKET> <K_RBRACKET>)?{
		jjtThis.data.put("type","DOUBLEARRAY");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared double");
	}
	| 
	<K_STRING> t=<IDENTIFIER> (<K_LBRACKET> <K_RBRACKET>)?{
		jjtThis.data.put("type","STRINGARRAY");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared string");
	}
}

void body() #Body :
{/*Variable Declarations*/}
{
	(function() | procedure() | expression() | doLoop() | whileLoop() | ifThen())* 
	{

	}
}

void expression() #Expression :
{ /*Variable Declrations*/ }
{
	LOOKAHEAD(declaration())
	declaration() <K_SEMI>
	{
		jjtThis.data.put("type","Variable Declaration");
	}
	| LOOKAHEAD(assignment())
	assignment() <K_SEMI> 
	{
		jjtThis.data.put("type","Variable Assignment");
	}
	| LOOKAHEAD(functionCall())
	functionCall() <K_SEMI>
	{

	}
	| <K_RETURN> value() <K_SEMI> 
	{

	}
}

void declaration() #Declaration :
{ Token t; }
{
	LOOKAHEAD(4)
	<K_INTEGER> t=<IDENTIFIER> <K_LBRACKET> <K_RBRACKET>
	{
		jjtThis.data.put("type","INTEGERARRAY");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer array");
	}
	| LOOKAHEAD(4)
	<K_DOUBLE> t=<IDENTIFIER> <K_LBRACKET> <K_RBRACKET>
	{
		jjtThis.data.put("type","DOUBLEARRAY");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared double array");
	}
	| LOOKAHEAD(4)
	<K_STRING> t=<IDENTIFIER> <K_LBRACKET> <K_RBRACKET>
	{
		jjtThis.data.put("type","STRINGARRAY");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared String array");
	}
	| <K_INTEGER> t=<IDENTIFIER> (<K_ASSIGN> value())?
	{
		jjtThis.data.put("type","INTEGER");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| <K_DOUBLE> t=<IDENTIFIER> (<K_ASSIGN> value())?
	{
		jjtThis.data.put("type","DOUBLE");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| <K_STRING> t=<IDENTIFIER> (<K_ASSIGN> value())?
	{
		jjtThis.data.put("type","STRING");
		jjtThis.data.put("value",t.image);
		jjtThis.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
}

void assignment() #Assignment :
{ Token val; Token var;}
{
	LOOKAHEAD(2) <IDENTIFIER> assignOperator() value() {
		jjtThis.data.put("more", "yes");
		System.out.println("Matched assignment with value");
	}
	| LOOKAHEAD(2) <IDENTIFIER> <K_INCREMENT> {
		jjtThis.data.put("more", "no");
		jjtThis.data.put("assign", "++");
		System.out.println("Matched ++");
	}
	| LOOKAHEAD(2) <IDENTIFIER> <K_DECREMENT> {
		jjtThis.data.put("more", "no");
		jjtThis.data.put("assign", "--");
		System.out.println("Matched --");
	}

}

void assignOperator() #AssignOperator :
{ Token t;}
{
	t=<K_ASSIGN> {
		jjtThis.data.put("assign", "=");
		System.out.println("Assigned variable");
	}
	| t=<K_ASSIGN_PLUS> {
		jjtThis.data.put("assign", "+=");
		System.out.println("Plus assigned variable");
	}
	| t=<K_ASSIGN_MINUS> {
		jjtThis.data.put("assign", "-=");
		System.out.println("Minus assigned variable");
	}
	| t=<K_ASSIGN_MULTIPLY> {
		jjtThis.data.put("assign", "*=");
		System.out.println("Times assigned variable");
	}
	| t=<K_ASSIGN_DIVIDE> {
		jjtThis.data.put("assign", "/=");
		System.out.println("Divide assigned variable");
	}
	| t=<K_ASSIGN_MOD> {
		jjtThis.data.put("assign", "%=");
		System.out.println("Mod assigned variable");
	}
}

void functionCall() #FunctionCall :
{ /*Variable Declrations*/ }
{
	(printCall() | readCall() | definedCall())
	{

	}
}

void printCall() #PrintCall :
{ Token t; }
{
	<K_PRINT_INTEGER> <K_LPAREN> t=value() <K_RPAREN> 
	{
		jjtThis.data.put("printType", "int");
		jjtThis.data.put("printVal", t.image);
		System.out.println("Printing int");
	}
	| <K_PRINT_DOUBLE> <K_LPAREN> t=value() <K_RPAREN> 
	{
		jjtThis.data.put("printType", "double");
		jjtThis.data.put("printVal", t.image);
		System.out.println("Printing double");
	}
	| <K_PRINT_STRING> <K_LPAREN> t=value() <K_RPAREN> 
	{
		jjtThis.data.put("printType", "String");
		jjtThis.data.put("printVal", t.image);
		System.out.println("Printing string");
	}
}

void readCall() #ReadCall :
{ /*Variable Declrations*/ }
{
	<K_READ_INTEGER> <K_LPAREN> value() <K_RPAREN>
	{

	}
	| <K_READ_DOUBLE> <K_LPAREN> value() <K_RPAREN> 
	{

	}
	| <K_READ_STRING> <K_LPAREN> value() <K_RPAREN> 
	{
		
	}
}

void definedCall() #DefinedCall :
{ /*Variable Declrations*/ }
{
	<IDENTIFIER> <K_LPAREN> <K_RPAREN> 
	{

	}
	| <IDENTIFIER> <K_LPAREN> valueList() <K_RPAREN> 
	{

	}
}

void valueList() #ValueList :
{
	/* declare variables */
}
{
	value() (<K_COMMA> value())* {}
}


void value() #Value :
{/* May need Lookaheads */}
{
	<K_LPAREN> value() <K_RPAREN> {}
	| atomicValue()  {}
	| definedCall() {}
	| assignment() {}
	| mathOperatorValue() {}
}

void atomicValue() #AtomicValue :
{ Token t;}
{
	t=<IDENTIFIER> {jjtThis.data.put("Type","IDENTIFIER"); jjtThis.data.put("Value", t.image);}
	| t=<ICONSTANT> {jjtThis.data.put("Type","ICONSTANT"); jjtThis.data.put("Value", t.image);}
	| t=<DCONSTANT> {jjtThis.data.put("Type","DCONSTANT"); jjtThis.data.put("Value", t.image);}
	| t=<SCONSTANT> {jjtThis.data.put("Type","SCONSTANT"); jjtThis.data.put("Value", t.image);}
}

void mathOperatorValue() #mathOperatorValue :
{}
{
	value() mathOperatorValueTail() {}
}

void mathOperatorValueTail() #MathOperatorValueTail :
{}
{
	(mathOperator() value())? mathOperatorValueTail() {}
}

void statementBlock() #StatementBlock :
{}
{
	expression() {}
	|
	<K_LCURLY> (expression())* <K_RCURLY> {}
}

void predicate() #Predicate :
{}
{
	LOOKAHEAD("!" predicate()) 
	<K_NOT> predicate() {}
	| LOOKAHEAD(value() compareOperator() value()) 
	value() compareOperator() value() {}
	| LOOKAHEAD(predicate() connectiveOperator() predicate())
	compoundPredicate() {}
}

void compoundPredicate() #CompundPredicate :
{}
{
	predicate() compoundPredicateTail() {}
}

void compoundPredicateTail() #CompundPredicateTail :
{}
{
	(connectiveOperator() predicate())? compoundPredicateTail() {}
}

void connectiveOperator() #ConnectiveOperator :
{ Token t;}
{
	t=<K_DAND> {}
	| t=<K_DOR> {}
}

void compareOperator() #CompareOperator :
{ Token t;}
{
	t=<K_DEQ> {}
	| t=<K_NE> {}
	| t=<K_GEQ> {}
	| t=<K_GT> {}
	| t=<K_LEQ> {}
	| t=<K_LT> {}
}

void mathOperator() #MathOperator :
{ Token t;}
{
	t=<K_PLUS> {}
	| t=<K_MINUS> {}
	| t=<K_MOD> {}
	| t=<K_MULTIPLY> {}
	| t=<K_DIVIDE> {}
}

void doLoop() #DoLoop :
{ /*Variable Declarations*/ }
{
	<K_DO> <K_LPAREN> assignment() <K_SEMI> predicate() <K_SEMI> assignment() <K_SEMI> <K_RPAREN> statementBlock()
	{
		
	}
}

void whileLoop() #WhileLoop :
{ /*Variable Declrations*/ }
{
	<K_WHILE> <K_LPAREN> predicate() <K_RPAREN> statementBlock() 
	{

	}
}

void ifThen() #IfThen :
{ /*Variable Declrations*/ }
{
	<K_IF> <K_LPAREN> predicate() <K_RPAREN> <K_THEN> statementBlock() 
	(<K_ELSE> <K_IF> <K_LPAREN> predicate() <K_RPAREN> <K_THEN> statementBlock())* 
	(<K_ELSE> statementBlock())?
	{

	}
}