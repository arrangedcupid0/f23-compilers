/* Generated By:JJTree&JavaCC: Do not edit this line. Compiler.java */
public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants, CompilerConstants {/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();
  public static void main(String args[]) throws Exception {
    //Compiler parser = new Compiler(new java.io.FileReader(args[0]));
    Compiler parser = new Compiler(System.in);
    ASTProgram expr=parser.program();
    TreeWalk v=new TreeWalk();
    expr.jjtAccept(v,null);
  }

  static final public ASTProgram program() throws ParseException {
 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_PROGRAM);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(K_LCURLY);
      programBody();
      jj_consume_token(K_RCURLY);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                System.out.println("Match program");
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void programBody() throws ParseException {
 /*@bgen(jjtree) ProgramBody */
  ASTProgramBody jjtn000 = new ASTProgramBody(JJTPROGRAMBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FUNCTION:
        case K_PROCEDURE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FUNCTION:
          function();
          break;
        case K_PROCEDURE:
          procedure();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void function() throws ParseException {
 /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; Token t2;
    try {
      if (jj_2_1(5)) {
        jj_consume_token(K_FUNCTION);
        type();
        t2 = jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LPAREN);
        jj_consume_token(K_RPAREN);
        jj_consume_token(K_LCURLY);
        body();
        jj_consume_token(K_RCURLY);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("Param","false");
                jjtn000.data.put("type",t.image);
                jjtn000.data.put("funcName",t2.image);
                System.out.println("Matched Function");
      } else if (jj_2_2(5)) {
        jj_consume_token(K_FUNCTION);
        type();
        t2 = jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LPAREN);
        parameterList();
        jj_consume_token(K_RPAREN);
        jj_consume_token(K_LCURLY);
        body();
        jj_consume_token(K_RCURLY);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("Param","true");
                jjtn000.data.put("type",t.image);
                jjtn000.data.put("funcName",t2.image);
                System.out.println("Matched Function");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void type() throws ParseException {
 /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTEGER:
        jj_consume_token(K_INTEGER);
        break;
      case K_DOUBLE:
        jj_consume_token(K_DOUBLE);
        break;
      case K_STRING:
        jj_consume_token(K_STRING);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void procedure() throws ParseException {
 /*@bgen(jjtree) Procedure */
  ASTProcedure jjtn000 = new ASTProcedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(4)) {
        jj_consume_token(K_PROCEDURE);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LPAREN);
        jj_consume_token(K_RPAREN);
        jj_consume_token(K_LCURLY);
        body();
        jj_consume_token(K_RCURLY);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PROCEDURE:
          jj_consume_token(K_PROCEDURE);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(K_LPAREN);
          parameterList();
          jj_consume_token(K_RPAREN);
          jj_consume_token(K_LCURLY);
          body();
          jj_consume_token(K_RCURLY);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void parameterList() throws ParseException {
 /*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      parameter();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(K_COMMA);
        parameter();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void parameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTEGER:
        jj_consume_token(K_INTEGER);
        t = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LBRACKET:
          jj_consume_token(K_LBRACKET);
          jj_consume_token(K_RBRACKET);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                jjtn000.data.put("type","INTEGERARRAY");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
        break;
      case K_DOUBLE:
        jj_consume_token(K_DOUBLE);
        t = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LBRACKET:
          jj_consume_token(K_LBRACKET);
          jj_consume_token(K_RBRACKET);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                jjtn000.data.put("type","DOUBLEARRAY");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
        break;
      case K_STRING:
        jj_consume_token(K_STRING);
        t = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LBRACKET:
          jj_consume_token(K_LBRACKET);
          jj_consume_token(K_RBRACKET);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                jjtn000.data.put("type","STRINGARRAY");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void body() throws ParseException {
 /*@bgen(jjtree) Body */
  ASTBody jjtn000 = new ASTBody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DO:
        case K_DOUBLE:
        case K_FUNCTION:
        case K_IF:
        case K_INTEGER:
        case K_PRINT_DOUBLE:
        case K_PRINT_INTEGER:
        case K_PRINT_STRING:
        case K_PROCEDURE:
        case K_READ_DOUBLE:
        case K_READ_INTEGER:
        case K_READ_STRING:
        case K_RETURN:
        case K_STRING:
        case K_WHILE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FUNCTION:
          function();
          break;
        case K_PROCEDURE:
          procedure();
          break;
        case K_DOUBLE:
        case K_INTEGER:
        case K_PRINT_DOUBLE:
        case K_PRINT_INTEGER:
        case K_PRINT_STRING:
        case K_READ_DOUBLE:
        case K_READ_INTEGER:
        case K_READ_STRING:
        case K_RETURN:
        case K_STRING:
        case IDENTIFIER:
          expression();
          break;
        case K_DO:
          doLoop();
          break;
        case K_WHILE:
          whileLoop();
          break;
        case K_IF:
          ifThen();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2147483647)) {
        declaration();
        jj_consume_token(K_SEMI);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","Variable Declaration");
      } else if (jj_2_5(2147483647)) {
        assignment();
        jj_consume_token(K_SEMI);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","Variable Assignment");
      } else if (jj_2_6(2147483647)) {
        functionCall();
        jj_consume_token(K_SEMI);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_RETURN:
          jj_consume_token(K_RETURN);
          value();
          jj_consume_token(K_SEMI);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declaration() throws ParseException {
 /*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_7(4)) {
        jj_consume_token(K_INTEGER);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LBRACKET);
        jj_consume_token(K_RBRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","INTEGERARRAY");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
      } else if (jj_2_8(4)) {
        jj_consume_token(K_DOUBLE);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LBRACKET);
        jj_consume_token(K_RBRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","DOUBLEARRAY");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
      } else if (jj_2_9(4)) {
        jj_consume_token(K_STRING);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LBRACKET);
        jj_consume_token(K_RBRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","STRINGARRAY");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INTEGER:
          jj_consume_token(K_INTEGER);
          t = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ASSIGN:
            jj_consume_token(K_ASSIGN);
            value();
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","INTEGER");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
          break;
        case K_DOUBLE:
          jj_consume_token(K_DOUBLE);
          t = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ASSIGN:
            jj_consume_token(K_ASSIGN);
            value();
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","DOUBLE");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
          break;
        case K_STRING:
          jj_consume_token(K_STRING);
          t = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ASSIGN:
            jj_consume_token(K_ASSIGN);
            value();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.data.put("type","STRING");
                jjtn000.data.put("value",t.image);
                jjtn000.data.put("lineNo",t.beginLine);
                System.out.println("Declared integer");
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void assignment() throws ParseException {
 /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token val; Token var;
    try {
      if (jj_2_10(2)) {
        jj_consume_token(IDENTIFIER);
        assignOperator();
        value();
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;

      } else if (jj_2_11(2)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(K_INCREMENT);
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;

      } else if (jj_2_12(2)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(K_DECREMENT);
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void assignOperator() throws ParseException {
 /*@bgen(jjtree) AssignOperator */
  ASTAssignOperator jjtn000 = new ASTAssignOperator(JJTASSIGNOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASSIGN:
        t = jj_consume_token(K_ASSIGN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;

        break;
      case K_ASSIGN_PLUS:
        t = jj_consume_token(K_ASSIGN_PLUS);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;

        break;
      case K_ASSIGN_MINUS:
        t = jj_consume_token(K_ASSIGN_MINUS);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;

        break;
      case K_ASSIGN_MULTIPLY:
        t = jj_consume_token(K_ASSIGN_MULTIPLY);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;

        break;
      case K_ASSIGN_DIVIDE:
        t = jj_consume_token(K_ASSIGN_DIVIDE);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;

        break;
      case K_ASSIGN_MOD:
        t = jj_consume_token(K_ASSIGN_MOD);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;

        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void functionCall() throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PRINT_DOUBLE:
      case K_PRINT_INTEGER:
      case K_PRINT_STRING:
        printCall();
        break;
      case K_READ_DOUBLE:
      case K_READ_INTEGER:
      case K_READ_STRING:
        readCall();
        break;
      case IDENTIFIER:
        definedCall();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void printCall() throws ParseException {
 /*@bgen(jjtree) PrintCall */
  ASTPrintCall jjtn000 = new ASTPrintCall(JJTPRINTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PRINT_INTEGER:
        jj_consume_token(K_PRINT_INTEGER);
        jj_consume_token(K_LPAREN);
        value();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

        break;
      case K_PRINT_DOUBLE:
        jj_consume_token(K_PRINT_DOUBLE);
        jj_consume_token(K_LPAREN);
        value();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

        break;
      case K_PRINT_STRING:
        jj_consume_token(K_PRINT_STRING);
        jj_consume_token(K_LPAREN);
        value();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void readCall() throws ParseException {
 /*@bgen(jjtree) ReadCall */
  ASTReadCall jjtn000 = new ASTReadCall(JJTREADCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_READ_INTEGER:
        jj_consume_token(K_READ_INTEGER);
        jj_consume_token(K_LPAREN);
        value();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

        break;
      case K_READ_DOUBLE:
        jj_consume_token(K_READ_DOUBLE);
        jj_consume_token(K_LPAREN);
        value();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

        break;
      case K_READ_STRING:
        jj_consume_token(K_READ_STRING);
        jj_consume_token(K_LPAREN);
        value();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void definedCall() throws ParseException {
 /*@bgen(jjtree) DefinedCall */
  ASTDefinedCall jjtn000 = new ASTDefinedCall(JJTDEFINEDCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_13(3)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LPAREN);
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

      } else if (jj_2_14(3)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(K_LPAREN);
        valueList();
        jj_consume_token(K_RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void valueList() throws ParseException {
 /*@bgen(jjtree) ValueList */
  ASTValueList jjtn000 = new ASTValueList(JJTVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      value();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_4;
        }
        jj_consume_token(K_COMMA);
        value();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void value() throws ParseException {
 /*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_15(1000)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case ICONSTANT:
      case SCONSTANT:
      case DCONSTANT:
        atomicValue();
        break;
        definedCall();
        break;
        assignment();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DIVIDE:
        case K_MINUS:
        case K_MOD:
        case K_MULTIPLY:
        case K_PLUS:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_5;
        }
        mathOperator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case ICONSTANT:
        case SCONSTANT:
        case DCONSTANT:
          atomicValue();
          break;
          definedCall();
          break;
          assignment();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(K_RPAREN);
                                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                               jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void atomicValue() throws ParseException {
 /*@bgen(jjtree) AtomicValue */
  ASTAtomicValue jjtn000 = new ASTAtomicValue(JJTATOMICVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.data.put("Type","IDENTIFIER"); jjtn000.data.put("Value", t.image);
        break;
      case ICONSTANT:
        t = jj_consume_token(ICONSTANT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.data.put("Type","ICONSTANT"); jjtn000.data.put("Value", t.image);
        break;
      case DCONSTANT:
        t = jj_consume_token(DCONSTANT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.data.put("Type","DCONSTANT"); jjtn000.data.put("Value", t.image);
        break;
      case SCONSTANT:
        t = jj_consume_token(SCONSTANT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.data.put("Type","SCONSTANT"); jjtn000.data.put("Value", t.image);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void statementBlock() throws ParseException {
 /*@bgen(jjtree) StatementBlock */
  ASTStatementBlock jjtn000 = new ASTStatementBlock(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DOUBLE:
      case K_INTEGER:
      case K_PRINT_DOUBLE:
      case K_PRINT_INTEGER:
      case K_PRINT_STRING:
      case K_READ_DOUBLE:
      case K_READ_INTEGER:
      case K_READ_STRING:
      case K_RETURN:
      case K_STRING:
      case IDENTIFIER:
        expression();
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;

        break;
      case K_LCURLY:
        jj_consume_token(K_LCURLY);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_DOUBLE:
          case K_INTEGER:
          case K_PRINT_DOUBLE:
          case K_PRINT_INTEGER:
          case K_PRINT_STRING:
          case K_READ_DOUBLE:
          case K_READ_INTEGER:
          case K_READ_STRING:
          case K_RETURN:
          case K_STRING:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_6;
          }
          expression();
        }
        jj_consume_token(K_RCURLY);
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;

        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void predicate() throws ParseException {
 /*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_7;
        }
        jj_consume_token(K_NOT);
      }
      value();
      compareOperator();
      value();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DAND:
        case K_DOR:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_8;
        }
        connectiveOperator();
        value();
        compareOperator();
        value();
      }
                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                   jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void connectiveOperator() throws ParseException {
 /*@bgen(jjtree) ConnectiveOperator */
  ASTConnectiveOperator jjtn000 = new ASTConnectiveOperator(JJTCONNECTIVEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DAND:
        t = jj_consume_token(K_DAND);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;

        break;
      case K_DOR:
        t = jj_consume_token(K_DOR);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;

        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void compareOperator() throws ParseException {
 /*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEQ:
        t = jj_consume_token(K_DEQ);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;

        break;
      case K_NE:
        t = jj_consume_token(K_NE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;

        break;
      case K_GEQ:
        t = jj_consume_token(K_GEQ);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;

        break;
      case K_GT:
        t = jj_consume_token(K_GT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;

        break;
      case K_LEQ:
        t = jj_consume_token(K_LEQ);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;

        break;
      case K_LT:
        t = jj_consume_token(K_LT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;

        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void mathOperator() throws ParseException {
 /*@bgen(jjtree) MathOperator */
  ASTMathOperator jjtn000 = new ASTMathOperator(JJTMATHOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PLUS:
        t = jj_consume_token(K_PLUS);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;

        break;
      case K_MINUS:
        t = jj_consume_token(K_MINUS);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;

        break;
      case K_MOD:
        t = jj_consume_token(K_MOD);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;

        break;
      case K_MULTIPLY:
        t = jj_consume_token(K_MULTIPLY);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;

        break;
      case K_DIVIDE:
        t = jj_consume_token(K_DIVIDE);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;

        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void doLoop() throws ParseException {
 /*@bgen(jjtree) DoLoop */
  ASTDoLoop jjtn000 = new ASTDoLoop(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DO);
      jj_consume_token(K_LPAREN);
      assignment();
      jj_consume_token(K_SEMI);
      predicate();
      jj_consume_token(K_SEMI);
      assignment();
      jj_consume_token(K_SEMI);
      jj_consume_token(K_RPAREN);
      statementBlock();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void whileLoop() throws ParseException {
 /*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHILE);
      jj_consume_token(K_LPAREN);
      predicate();
      jj_consume_token(K_RPAREN);
      statementBlock();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ifThen() throws ParseException {
 /*@bgen(jjtree) IfThen */
  ASTIfThen jjtn000 = new ASTIfThen(JJTIFTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IF);
      jj_consume_token(K_LPAREN);
      predicate();
      jj_consume_token(K_RPAREN);
      jj_consume_token(K_THEN);
      statementBlock();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ELSE:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_9;
        }
        jj_consume_token(K_ELSE);
        jj_consume_token(K_IF);
        jj_consume_token(K_LPAREN);
        predicate();
        jj_consume_token(K_RPAREN);
        jj_consume_token(K_THEN);
        statementBlock();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        statementBlock();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(K_DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(K_STRING)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(K_INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(K_DOUBLE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(K_INTEGER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(K_STRING)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LBRACKET)) return true;
    if (jj_scan_token(K_RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(K_PROCEDURE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(K_READ_STRING)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(K_DOUBLE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LBRACKET)) return true;
    if (jj_scan_token(K_RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(K_READ_DOUBLE)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(K_DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(K_READ_INTEGER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(K_MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(K_INTEGER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LBRACKET)) return true;
    if (jj_scan_token(K_RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(K_MOD)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(K_MINUS)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(K_PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(K_PRINT_STRING)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(K_FUNCTION)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(K_PRINT_DOUBLE)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(K_PRINT_INTEGER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(K_FUNCTION)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_LPAREN)) return true;
    if (jj_scan_token(K_RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(K_ASSIGN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(K_ASSIGN_MOD)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(K_ASSIGN_DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(K_ASSIGN_MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(K_ASSIGN_MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(K_ASSIGN_PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(K_ASSIGN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(K_ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(K_ASSIGN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_DECREMENT)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(SCONSTANT)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(K_INCREMENT)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(DCONSTANT)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(ICONSTANT)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(K_STRING)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10400,0x10400,0x401080,0x10000,0x80000000,0x0,0x0,0x0,0x401080,0x17dfcc0,0x17dfcc0,0x200000,0x2000000,0x2000000,0x2000000,0x401080,0x7e000000,0x1ce000,0xe000,0x1c0000,0x80000000,0x0,0x0,0x0,0x0,0x7cf080,0x7cf080,0x0,0x0,0x0,0x0,0x0,0x100,0x100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x1e000000,0x8d004,0x1e000000,0x1e000000,0x2000000,0x2000200,0x20000,0xa,0xa,0x10970,0x8d004,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
