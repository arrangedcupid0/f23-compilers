/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Generated\te1.jj */
/*@egen*/options {
              
                
                          
                           
                                         
   OUTPUT_DIRECTORY = "Generated";
}

PARSER_BEGIN(Compiler)

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/

  public static void main(String args[]) throws Exception {
    //Compiler parser = new Compiler(new java.io.FileReader(args[0]));
    Compiler parser = new Compiler(System.in);
    ASTprogram expr=parser.program();
    //SymbolTable v=new SymbolTable();
    //System.out.println(expr.jjtAccept(v,null));

  }
}

PARSER_END(Compiler)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}



TOKEN:
{
		<K_PROGRAM: 		"program" >
	|	<K_FUNCTION: 		"function">
	|	<K_PRINT_INTEGER: 	"print_integer">
	|	<K_PRINT_STRING:	"print_string">
	|	<K_PRINT_DOUBLE:	"print_double">
	|	<K_INTEGER: 		"integer">
	|	<K_ASSIGN: 			":=">
	|	<K_LCURLY: 			"{">
	|	<K_RCURLY: 			"}">
	| 	<K_LPAREN: 			"(">
	| 	<K_RPAREN: 			")">
	| 	<K_SEMI: 			";">
}

TOKEN : {
	   <IDENTIFIER: (["_","a"-"z","A"-"Z","$"]) (["_","a"-"z","A"-"Z","0"-"9","$"])*>
	|  <ICONSTANT: 	(["0"-"9"])+>
	|  <SCONSTANT: 	"\"" (~["\"","\n"])* "\"">
	|  <DCONSTANT: 	(["0"-"9"])* ["."] (["0"-"9"])* | (["0"-"9"])+ (["."] (["0"-"9"])+)? (["e","E"] (["+","-"])? (["0"-"9"])*)?>
}

ASTprogram program()         :
{/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) program */
  try {
/*@egen*/
  <K_PROGRAM> <IDENTIFIER> <K_LCURLY> (function())+ <K_RCURLY>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { System.out.println("Match program");
	return jjtn000; 
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void function()          :
{/*@bgen(jjtree) function */
  ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) function */
        try {
/*@egen*/
	<K_FUNCTION> <K_INTEGER> <IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> (statement())+ <K_RCURLY>/*@bgen(jjtree)*/
                                                                                                         {
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                         }
/*@egen*/ {System.out.println("Matched Function");}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void statement() :
{ /*Variable Declrations*/ }
{
	<K_INTEGER> <IDENTIFIER> <K_SEMI> {System.out.println("Declared integer");}

	| <IDENTIFIER> <K_ASSIGN> <ICONSTANT> <K_SEMI> {System.out.println("Assigned a value");}

	| print_statement() {System.out.println("Printed a statement");}

}

void print_statement() :
{ /*Variable Declrations*/ }
{
	<K_PRINT_INTEGER> 	<K_LPAREN> (<IDENTIFIER> | <ICONSTANT>) <K_RPAREN> <K_SEMI> {System.out.println("Printing an integer variable");}

	| <K_PRINT_DOUBLE> 	<K_LPAREN> (<IDENTIFIER> | <DCONSTANT>) <K_RPAREN> <K_SEMI> {System.out.println("Printing a double variable");}

	| <K_PRINT_STRING> 	<K_LPAREN> (<IDENTIFIER> | <SCONSTANT>) <K_RPAREN> <K_SEMI> {System.out.println("Printing a string variable");}

}

