/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Generated\te1.jj */
/*@egen*/options {
              
                
                          
                           
                                         
   OUTPUT_DIRECTORY = "Generated";
}

PARSER_BEGIN(Compiler)

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/

  public static void main(String args[]) throws Exception {
    //Compiler parser = new Compiler(new java.io.FileReader(args[0]));
    Compiler parser = new Compiler(System.in);
    ASTProgram expr=parser.program();
    TreeWalk v=new TreeWalk();
    expr.jjtAccept(v,null);
  }
}

PARSER_END(Compiler)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}

TOKEN:
{
		<K_DO: 				"do" >
	|	<K_DOUBLE: 			"double">
	|	<K_ELSE: 			"else">
	|	<K_EXIT:			"exit">
	|	<K_FUNCTION:		"function">
	|	<K_IF: 				"if">
	|	<K_INTEGER: 		"integer">
	|	<K_PRINT_DOUBLE: 	"print_double">
	|	<K_PRINT_INTEGER: 	"print_integer">
	|	<K_PRINT_STRING: 	"print_string">
	|	<K_PROCEDURE: 		"procedure">
	|	<K_PROGRAM: 		"program">
	|	<K_READ_DOUBLE: 	"read_double">
	|	<K_READ_INTEGER: 	"read_integer">
	|	<K_READ_STRING: 	"read_string">
	|	<K_RETURN: 			"return">
	|	<K_STRING: 			"string">
	|	<K_THEN: 			"then">
	|	<K_WHILE: 			"while">
	|	<K_ASSIGN: 			":=">
	|	<K_ASSIGN_PLUS: 		"+=">
	|	<K_ASSIGN_MINUS: 		"-=">
	|	<K_ASSIGN_MULTIPLY: 	"*=">
	|	<K_ASSIGN_DIVIDE: 	"/=">
	|	<K_ASSIGN_MOD: 		"%=">
	|	<K_COMMA: 			",">
	|	<K_COMMENT: 			"//">
	|	<K_DAND: 				"&&">
	|	<K_DIVIDE: 			"/">
	|	<K_DOR: 				"||">
	|	<K_DEQ: 				"==">
	|	<K_GEQ: 				">=">
	|	<K_GT: 				">">
	|	<K_LBRACKET: 			"[">
	|	<K_LEQ: 				"<=">
	|	<K_LCURLY: 			"{">
	|	<K_LPAREN: 			"(">
	|	<K_LT: 				"<">
	|	<K_MINUS: 			"-">
	|	<K_DECREMENT: 		"--">
	|	<K_MOD: 				"%">
	|	<K_MULTIPLY: 			"*">
	|	<K_NE: 				"!=">
	|	<K_NOT: 				"!">
	|	<K_PERIOD: 			".">
	|	<K_PLUS: 				"+">
	| 	<K_INCREMENT: 		"++">
	| 	<K_RBRACKET: 			"]">
	| 	<K_RCURLY: 			"}">
	| 	<K_RPAREN: 			")">
	| 	<K_SEMI: 				";">
}

TOKEN : {
	   <IDENTIFIER: (["_","a"-"z","A"-"Z","$"]) (["_","a"-"z","A"-"Z","0"-"9","$"])*>
	|  <ICONSTANT: 	(["0"-"9"])+>
	|  <SCONSTANT: 	"\"" (~["\"","\n"])* "\"">
	|  <DCONSTANT: 	(["0"-"9"])* ["."] (["0"-"9"])* | (["0"-"9"])+ (["."] (["0"-"9"])+)? (["d"] (["+","-"])? (["0"-"9"])*)?>
}

ASTProgram program()         :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declarations*/ }
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  <K_PROGRAM> <IDENTIFIER> <K_LCURLY> programBody() <K_RCURLY>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ 
		System.out.println("Match program");
		return jjtn000; 
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void programBody()             :
{/*@bgen(jjtree) ProgramBody */
  ASTProgramBody jjtn000 = new ASTProgramBody(JJTPROGRAMBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*//*Variable Declarations*/}
{/*@bgen(jjtree) ProgramBody */
        try {
/*@egen*/
	(function() | procedure())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function()          :
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; Token t2; }
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	LOOKAHEAD(5)
	<K_FUNCTION> type() t2=<IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> body() <K_RCURLY>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		jjtn000.data.put("Param","false");
		jjtn000.data.put("type",t.image);
		jjtn000.data.put("funcName",t2.image);
		System.out.println("Matched Function");
	}
	| LOOKAHEAD(5)
	<K_FUNCTION> type() t2=<IDENTIFIER> <K_LPAREN> parameterList() <K_RPAREN> <K_LCURLY> body() <K_RCURLY>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		jjtn000.data.put("Param","true");
		jjtn000.data.put("type",t.image);
		jjtn000.data.put("funcName",t2.image);
		System.out.println("Matched Function");
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void type()      :
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	(<K_INTEGER> | <K_DOUBLE> | <K_STRING>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void procedure()           :
{/*@bgen(jjtree) Procedure */
  ASTProcedure jjtn000 = new ASTProcedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*//*Variable Declarations*/}
{/*@bgen(jjtree) Procedure */
        try {
/*@egen*/
	LOOKAHEAD(4)
	<K_PROCEDURE> <IDENTIFIER> <K_LPAREN> <K_RPAREN> <K_LCURLY> body() <K_RCURLY>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		
	}
	| <K_PROCEDURE> <IDENTIFIER> <K_LPAREN> parameterList() <K_RPAREN> <K_LCURLY> body() <K_RCURLY>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameterList()               :
{/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterList */
        try {
/*@egen*/
	parameter() (<K_COMMA> parameter())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameter()           :
{/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	<K_INTEGER> t=<IDENTIFIER> (<K_LBRACKET> <K_RBRACKET>)?/*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                               }
/*@egen*/{
		jjtn000.data.put("type","INTEGERARRAY");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| 
	<K_DOUBLE> t=<IDENTIFIER> (<K_LBRACKET> <K_RBRACKET>)?/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                              }
/*@egen*/{
		jjtn000.data.put("type","DOUBLEARRAY");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| 
	<K_STRING> t=<IDENTIFIER> (<K_LBRACKET> <K_RBRACKET>)?/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                              }
/*@egen*/{
		jjtn000.data.put("type","STRINGARRAY");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void body()       :
{/*@bgen(jjtree) Body */
  ASTBody jjtn000 = new ASTBody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*//*Variable Declarations*/}
{/*@bgen(jjtree) Body */
        try {
/*@egen*/
	(function() | procedure() | expression() | doLoop() | whileLoop() | ifThen())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expression()             :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	LOOKAHEAD(declaration())
	declaration() <K_SEMI>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","Variable Declaration");
	}
	| LOOKAHEAD(assignment())
	assignment() <K_SEMI>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		jjtn000.data.put("type","Variable Assignment");
	}
	| LOOKAHEAD(functionCall())
	functionCall() <K_SEMI>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{

	}
	| <K_RETURN> value() <K_SEMI>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void declaration()              :
{/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	LOOKAHEAD(4)
	<K_INTEGER> t=<IDENTIFIER> <K_LBRACKET> <K_RBRACKET>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","INTEGERARRAY");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| LOOKAHEAD(4)
	<K_DOUBLE> t=<IDENTIFIER> <K_LBRACKET> <K_RBRACKET>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","DOUBLEARRAY");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| LOOKAHEAD(4)
	<K_STRING> t=<IDENTIFIER> <K_LBRACKET> <K_RBRACKET>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","STRINGARRAY");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| <K_INTEGER> t=<IDENTIFIER> (<K_ASSIGN> value())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","INTEGER");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| <K_DOUBLE> t=<IDENTIFIER> (<K_ASSIGN> value())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","DOUBLE");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}
	| <K_STRING> t=<IDENTIFIER> (<K_ASSIGN> value())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.data.put("type","STRING");
		jjtn000.data.put("value",t.image);
		jjtn000.data.put("lineNo",t.beginLine);
		System.out.println("Declared integer");
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void assignment()             :
{/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token val; Token var;}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
	LOOKAHEAD(2) <IDENTIFIER> assignOperator() value()/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {}
	| LOOKAHEAD(2) <IDENTIFIER> <K_INCREMENT>/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ {}
	| LOOKAHEAD(2) <IDENTIFIER> <K_DECREMENT>/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void assignOperator()                 :
{/*@bgen(jjtree) AssignOperator */
  ASTAssignOperator jjtn000 = new ASTAssignOperator(JJTASSIGNOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) AssignOperator */
        try {
/*@egen*/
	t=<K_ASSIGN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {}
	| t=<K_ASSIGN_PLUS>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {}
	| t=<K_ASSIGN_MINUS>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {}
	| t=<K_ASSIGN_MULTIPLY>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {}
	| t=<K_ASSIGN_DIVIDE>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {}
	| t=<K_ASSIGN_MOD>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void functionCall()               :
{/*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) FunctionCall */
        try {
/*@egen*/
	(printCall() | readCall() | definedCall())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void printCall()            :
{/*@bgen(jjtree) PrintCall */
  ASTPrintCall jjtn000 = new ASTPrintCall(JJTPRINTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) PrintCall */
        try {
/*@egen*/
	<K_PRINT_INTEGER> <K_LPAREN> value() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}
	| <K_PRINT_DOUBLE> <K_LPAREN> value() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}
	| <K_PRINT_STRING> <K_LPAREN> value() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void readCall()           :
{/*@bgen(jjtree) ReadCall */
  ASTReadCall jjtn000 = new ASTReadCall(JJTREADCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) ReadCall */
        try {
/*@egen*/
	<K_READ_INTEGER> <K_LPAREN> value() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{

	}
	| <K_READ_DOUBLE> <K_LPAREN> value() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}
	| <K_READ_STRING> <K_LPAREN> value() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void definedCall()              :
{/*@bgen(jjtree) DefinedCall */
  ASTDefinedCall jjtn000 = new ASTDefinedCall(JJTDEFINEDCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) DefinedCall */
        try {
/*@egen*/
	LOOKAHEAD(3)
	<IDENTIFIER> <K_LPAREN> <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}
	| LOOKAHEAD(3) <IDENTIFIER> <K_LPAREN> valueList() <K_RPAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void valueList()            :
{/*@bgen(jjtree) ValueList */
  ASTValueList jjtn000 = new ASTValueList(JJTVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueList */
        try {
/*@egen*/
	value() (<K_COMMA> value())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void value()        :
{/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*//* May need Lookaheads */}
{/*@bgen(jjtree) Value */
        try {
/*@egen*/
	LOOKAHEAD(1000)
	<K_LPAREN> (atomicValue() | definedCall() | assignment())(mathOperator() (atomicValue() | definedCall() | assignment()))* <K_RPAREN>/*@bgen(jjtree)*/
                                                                                                                                             {
                                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                               jjtc000 = false;
                                                                                                                                             }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void atomicValue()              :
{/*@bgen(jjtree) AtomicValue */
  ASTAtomicValue jjtn000 = new ASTAtomicValue(JJTATOMICVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) AtomicValue */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.data.put("Type","IDENTIFIER"); jjtn000.data.put("Value", t.image);}
	| t=<ICONSTANT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.data.put("Type","ICONSTANT"); jjtn000.data.put("Value", t.image);}
	| t=<DCONSTANT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.data.put("Type","DCONSTANT"); jjtn000.data.put("Value", t.image);}
	| t=<SCONSTANT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.data.put("Type","SCONSTANT"); jjtn000.data.put("Value", t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statementBlock()                 :
{/*@bgen(jjtree) StatementBlock */
  ASTStatementBlock jjtn000 = new ASTStatementBlock(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementBlock */
        try {
/*@egen*/
	expression()/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {}
	|
	<K_LCURLY> (expression())* <K_RCURLY>/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                              }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void predicate()            :
{/*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Predicate */
        try {
/*@egen*/
	(<K_NOT>)* (value() compareOperator() value()) (connectiveOperator() value() compareOperator() value())*/*@bgen(jjtree)*/
                                                                                                                 {
                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                   jjtc000 = false;
                                                                                                                 }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void connectiveOperator()                     :
{/*@bgen(jjtree) ConnectiveOperator */
  ASTConnectiveOperator jjtn000 = new ASTConnectiveOperator(JJTCONNECTIVEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) ConnectiveOperator */
        try {
/*@egen*/
	t=<K_DAND>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {}
	| t=<K_DOR>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void compareOperator()                  :
{/*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) CompareOperator */
        try {
/*@egen*/
	t=<K_DEQ>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {}
	| t=<K_NE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {}
	| t=<K_GEQ>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {}
	| t=<K_GT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {}
	| t=<K_LEQ>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {}
	| t=<K_LT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void mathOperator()               :
{/*@bgen(jjtree) MathOperator */
  ASTMathOperator jjtn000 = new ASTMathOperator(JJTMATHOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) MathOperator */
        try {
/*@egen*/
	t=<K_PLUS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {}
	| t=<K_MINUS>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {}
	| t=<K_MOD>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {}
	| t=<K_MULTIPLY>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {}
	| t=<K_DIVIDE>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void doLoop()         :
{/*@bgen(jjtree) DoLoop */
  ASTDoLoop jjtn000 = new ASTDoLoop(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declarations*/ }
{/*@bgen(jjtree) DoLoop */
        try {
/*@egen*/
	<K_DO> <K_LPAREN> assignment() <K_SEMI> predicate() <K_SEMI> assignment() <K_SEMI> <K_RPAREN> statementBlock()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void whileLoop()            :
{/*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) WhileLoop */
        try {
/*@egen*/
	<K_WHILE> <K_LPAREN> predicate() <K_RPAREN> statementBlock()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ifThen()         :
{/*@bgen(jjtree) IfThen */
  ASTIfThen jjtn000 = new ASTIfThen(JJTIFTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /*Variable Declrations*/ }
{/*@bgen(jjtree) IfThen */
        try {
/*@egen*/
	<K_IF> <K_LPAREN> predicate() <K_RPAREN> <K_THEN> statementBlock() 
	(<K_ELSE> <K_IF> <K_LPAREN> predicate() <K_RPAREN> <K_THEN> statementBlock())* 
	(<K_ELSE> statementBlock())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}